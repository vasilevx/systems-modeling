{"version":3,"sources":["labs/lab3.jsx","labs/lab4.jsx","labs/lab5.jsx","labs/lab6.jsx","labs/lab7.jsx","labs/lab8.jsx","Home.jsx","App.js","index.js"],"names":["reverseF","x","Math","atan","generateRandomValues","n","Array","map","random","Lab3","useState","u","setUpd","arraySize","setArraySize","reverseValues","sort","a","b","statValues","Fvalues","deltaP","min","max","m","floor","before","Date","now","forEach","index","FValue","tan","F","statValue","delta","abs","push","deltaX","parts","i","minValue","maxValue","data","size","val","item","mappedParts","part","V","P","mean","reduce","sum","variance","lambda","sqrt","isOk","FChartData","y","statChartData","after","console","log","inputRef","useRef","ref","type","defaultValue","onClick","e","preventDefault","current","value","style","maxWidth","options","animation","duration","hover","animationDuration","responsiveAnimationDuration","elements","line","tension","scales","xAxes","scaleLabel","display","labelString","yAxes","legend","datasets","steppedLine","fill","borderColor","label","pointRadius","pointHitRadius","colSpan","toFixed","color","h","Kf","Lab4","setU","whiteNoise","X","keys","corrTheoretical","_","exp","corrEmpirical","j","theorData","empirData","arr","length","lineOptions","getNormalSample","normalSample","v1","v2","s","r","slice","towardUniform","sample","rightFactor","pow","factorial","PI","Lab5","whiteNoiseData","mean1","X1","corrTheoretical1","corrEmpirical1","theorData1","empirData1","X2","mean2","corrEmpirical2","empirData2","X3","mean3","corrEmpirical3","empirData3","generateProcSample","linspace","startValue","stopValue","cardinality","step","ECDF","intervals","ecdfArray","sampleSize","lessThenX","filter","takeDelta","arr1","arr2","Lab6","sampleT1","sampleT2","gsample","st1Size","st2Size","F1","F2","lbmd","xVals","f1Data","f2Data","sampleT1_2","processSample","sampleT1_2Size","procSammpleSize","min2","max2","ecdf1","ecdf2","delta2","lmbd2","x2Vals","ecdf1Data","ecdf2Data","arg","Lab7","t","tau","n_counter","m_counter","ε_p","ε_error","firstAttempt","err","p","N","M","nRequired","round","secondAttempt","onSubmit","teorP","leftBottomSum","rightBottomSum","qTeor","Lab8","temp","k","Home","start","to","App","path","exact","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.8b007018.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport '../App.css';\nimport { Line } from 'react-chartjs-2';\nimport Zoom from 'chartjs-plugin-zoom';\n\n/* \nВариант 3 \nКритерий согласия Колмогорова\n*/\nconst analyticExpectedValue = 0.438;\nconst analyticVariance = 0.053;\n// const min = 0;\n// const max = Math.PI / 4;\nconst constLambda = 1.22;\nconst constP = 0.1;\n\n/* Плотность распределения */\nconst f = x => {\n    return 1 / (1 - Math.sin(x) ** 2);\n};\n\n/* Функция распределения */\nconst F = x => Math.tan(x);\n\n/* Обратная первообразной функция*/\nconst reverseF = x => Math.atan(x);\n\n/* Статистическая функция распределения */\n// const statFunction = sortedArr => {\n//     const len = sortedArr.length;\n//     const res = sortedArr.map((_, index) => (index + 1) / len);\n//     return res;\n// };\n\nexport const generateRandomValues = n => {\n    return [...new Array(n)].map(() => {\n        return Math.random();\n    });\n};\n\nconst Lab3 = () => {\n    const [u, setUpd] = useState(true);\n    const [arraySize, setArraySize] = useState(50);\n\n    /* Генерируем arraySize случайных чисел */\n    const randomNumbers = generateRandomValues(arraySize).sort((a, b) => a - b);\n\n    /* Находим значения обратной функции */\n    const reverseValues = randomNumbers.map(reverseF);\n\n    const statValues = [];\n    const Fvalues = [];\n    let deltaP = 0;\n    let min = 1;\n    let max = 0;\n\n    const m = arraySize > 500 ? 30 : Math.floor(arraySize / (15 / 20));\n\n    const before = Date.now();\n    reverseValues.forEach((x, index) => {\n        const FValue = F(x);\n\n        if (FValue < min) {\n            min = FValue;\n        }\n\n        if (FValue > max) {\n            max = FValue;\n        }\n        const statValue = (index + 1) / arraySize;\n\n        const delta = Math.abs(FValue - statValue);\n\n        if (delta > deltaP) {\n            deltaP = delta;\n        }\n\n        statValues.push(statValue);\n        Fvalues.push(FValue);\n    });\n\n    const deltaX = (max - min) / m;\n\n    const parts = [];\n\n    let i = 0;\n\n    while (i < m) {\n        const minValue = min + deltaX * i;\n        const maxValue = minValue + deltaX;\n        parts[i] = {\n            minValue,\n            maxValue,\n            data: [],\n            size: 0\n        };\n        i++;\n    }\n\n    reverseValues.forEach(val => {\n        parts.forEach(item => {\n            const { minValue, maxValue } = item;\n            if (val >= minValue && val <= maxValue) {\n                item.size += 1;\n                item.data.push(val);\n            }\n        });\n    });\n\n    const mappedParts = parts.map(part => ({\n        V: (part.minValue + part.maxValue) / 2,\n        P: part.size / arraySize\n    }));\n\n    const mean = mappedParts.reduce((sum, item) => sum + item.P * item.V, 0);\n    const variance = mappedParts.reduce(\n        (sum, item) => sum + item.P * (item.V - mean) ** 2,\n        0\n    );\n\n    const lambda = deltaP * Math.sqrt(arraySize);\n    const isOk = lambda <= constLambda;\n\n    /* Преобразуем в формат графика */\n    const FChartData = reverseValues.map((item, i) => ({\n        x: item,\n        y: Fvalues[i]\n    }));\n\n    const statChartData = reverseValues.map((item, i) => ({\n        x: item,\n        y: statValues[i]\n    }));\n\n    const after = Date.now();\n    console.log('Time', after - before);\n\n    const inputRef = useRef();\n    return (\n        <div>\n            <label>\n                <div>Размер выборки</div>\n                <input ref={inputRef} type=\"number\" defaultValue={arraySize} />\n                <button\n                    onClick={e => {\n                        e.preventDefault();\n                        setArraySize(+inputRef.current.value);\n\n                        setUpd(!u);\n                    }}\n                >\n                    Сгенерировать\n                </button>\n            </label>\n            <div style={{ maxWidth: '700px' }}>\n                <Line\n                    options={{\n                        animation: {\n                            duration: 0\n                        },\n                        hover: {\n                            animationDuration: 0\n                        },\n                        responsiveAnimationDuration: 0,\n                        elements: {\n                            line: {\n                                tension: 0\n                            }\n                        },\n                        scales: {\n                            xAxes: [\n                                {\n                                    type: 'linear',\n                                    scaleLabel: {\n                                        display: true,\n                                        labelString: 'Xi'\n                                    }\n                                }\n                            ],\n                            yAxes: [\n                                {\n                                    scaleLabel: {\n                                        display: true,\n                                        labelString: 'F(x)'\n                                    }\n                                }\n                            ]\n                        },\n                        legend: {\n                            display: true\n                        }\n                    }}\n                    data={{\n                        datasets: [\n                            {\n                                data: statChartData,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'blue',\n                                label: 'F*(x)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            },\n                            {\n                                data: FChartData,\n                                steppedLine: true,\n                                fill: false,\n                                borderColor: 'green',\n                                label: 'F(x)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n            </div>\n\n            <table>\n                <tbody>\n                    <tr>\n                        <th>\n                            Δ<sub>p</sub>\n                        </th>\n                        <td colSpan={2}>{deltaP.toFixed(3)}</td>\n                    </tr>\n                    <tr>\n                        <th>\n                            λ<sub>p</sub>\n                        </th>\n                        <td colSpan={2}>\n                            <b style={{ color: isOk ? 'green' : 'red' }}>\n                                {lambda.toFixed(4)}\n                            </b>\n                            <b>\n                                {isOk ? '⩽' : '>'} {constLambda}\n                            </b>\n                        </td>\n                    </tr>\n                    <tr>\n                        <th colSpan={3}>Параметры распределения</th>\n                    </tr>\n                    <tr>\n                        <th></th>\n                        <th>Теоретический</th>\n                        <th>Эмпирический</th>\n                    </tr>\n\n                    <tr>\n                        <th>Мат. ожидание</th>\n                        <th>{analyticExpectedValue}</th>\n                        <th>{mean.toFixed(3)}</th>\n                    </tr>\n                    <tr>\n                        <th>Дисперсия</th>\n                        <th>{analyticVariance}</th>\n                        <th>{variance.toFixed(3)}</th>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Lab3;\n","import React, { useState } from 'react';\nimport '../App.css';\nimport { Line } from 'react-chartjs-2';\nimport { generateRandomValues } from './lab3';\n/* Вариант 3 */\n\nconst D = 0.5;\nconst alpha = 2;\nconst h = 0.002;\nconst S0 = h / 12;\nconst Kf = Math.sqrt((2 * D) / alpha / S0);\nconst Tf = 1 / alpha;\n\nconst Lab4 = () => {\n    const [n, setN] = useState(10000);\n    const [u, setU] = useState(true);\n    const whiteNoise = generateRandomValues(n).map(item => item - 0.5);\n    let mean = 0;\n    const X = new Array(n).fill(0);\n    for (let i of [...Array(n - 1).keys()]) {\n        X[i + 1] = X[i] + h * ((Kf / Tf) * whiteNoise[i] - (1 / Tf) * X[i]);\n        mean += X[i + 1];\n    }\n    mean /= n;\n    const nsteps = 3 / alpha / h;\n    const corrTheoretical = new Array(nsteps)\n        .fill(0)\n        .map((_, i) => D * Math.exp(-alpha * i * h));\n    const corrEmpirical = [];\n    for (let j of [...Array(nsteps).keys()]) {\n        let sum = 0;\n        for (let i of [...Array(n - j).keys()]) {\n            sum += (X[i] - mean) * (X[i + j] - mean);\n        }\n        sum /= n + 1 - j;\n        corrEmpirical.push(sum);\n    }\n    const theorData = corrTheoretical.map((item, index) => ({\n        x: index,\n        y: item\n    }));\n    const empirData = corrEmpirical.map((item, index) => ({\n        x: index,\n        y: item\n    }));\n\n    return (\n        <div>\n            <label>\n                <div>Размер выборки {n}</div>\n                {/* <input\n                    type=\"number\"\n                    defaultValue={n}\n                    onKeyPress={e => {\n                        if (e.key === 'Enter') {\n                            const val = +e.target.value;\n                            console.log(val, nsteps);\n                            if (val < nsteps) {\n                                e.target.value = 750;\n                                return;\n                            }\n                            setU(!u);\n                            setN(+e.target.value);\n                        }\n                    }}\n                /> */}\n                <button onClick={() => setU(!u)}>Сгенерировать</button>\n            </label>\n            <div style={{ maxWidth: '700px' }}>\n                <Line\n                    options={{\n                        animation: {\n                            duration: 0\n                        },\n                        hover: {\n                            animationDuration: 0\n                        },\n                        responsiveAnimationDuration: 0,\n                        elements: {\n                            line: {\n                                tension: 0\n                            }\n                        },\n                        scales: {\n                            xAxes: [\n                                {\n                                    type: 'linear',\n                                    scaleLabel: {\n                                        display: true,\n                                        labelString: 't'\n                                    }\n                                }\n                            ],\n                            yAxes: [\n                                {\n                                    scaleLabel: {\n                                        display: true,\n                                        labelString: 'K(t)'\n                                    }\n                                }\n                            ]\n                        },\n                        legend: {\n                            display: true\n                        }\n                    }}\n                    data={{\n                        datasets: [\n                            {\n                                data: theorData,\n                                steppedLine: true,\n                                fill: false,\n                                borderColor: 'blue',\n                                label: 'Теор. K(t)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            },\n                            {\n                                data: empirData,\n                                steppedLine: true,\n                                fill: false,\n                                borderColor: 'green',\n                                label: 'Эмпирическая K*(t)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Lab4;\n","import React, { useState } from 'react';\nimport { generateRandomValues } from './lab3';\nimport { Line } from 'react-chartjs-2';\nconst reverseF = x => Math.atan(x);\n\nconst mean = arr => {\n    const size = arr.length;\n    return (\n        arr.reduce((sum, item) => {\n            sum += item;\n            return sum;\n        }, 0) / size\n    );\n};\n\nexport const lineOptions = {\n    animation: {\n        duration: 0\n    },\n    hover: {\n        animationDuration: 0\n    },\n    responsiveAnimationDuration: 0,\n    elements: {\n        line: {\n            tension: 0\n        }\n    },\n    scales: {\n        xAxes: [\n            {\n                type: 'linear',\n                scaleLabel: {\n                    display: true\n                    // labelString: 't'\n                }\n            }\n        ],\n        yAxes: [\n            {\n                scaleLabel: {\n                    display: true\n                    // labelString: 'K(t)'\n                }\n            }\n        ]\n    },\n    legend: {\n        display: true\n    }\n};\n\nfunction factorial(n) {\n    if (n === 0) return 1;\n    return n != 1 ? n * factorial(n - 1) : 1;\n}\n\nconst D = 0.5;\nconst alpha = 2;\nconst h = 0.002;\nconst n = 10000;\nconst nsteps = 3 / alpha / h;\n\nconst S0 = h;\nconst Kf = Math.sqrt((2 * D) / alpha / S0);\nconst Tf = 1 / alpha;\n\n/*********** */\nexport const getNormalSample = size => {\n    const normalSample = [];\n    while (normalSample.length < size) {\n        const uniSample = generateRandomValues(2);\n        const [v1, v2] = uniSample.map(item => 2 * item - 1);\n        const s = v1 ** 2 + v2 ** 2;\n\n        if (s >= 1) {\n            continue;\n        }\n\n        const r = Math.sqrt((-2 * Math.log(s)) / s);\n\n        normalSample.push(r * v1);\n        normalSample.push(r * v2);\n    }\n\n    return normalSample.slice(0, size);\n};\n\nexport const towardUniform = sample => {\n    let rightFactor = Array(sample.length).fill(0);\n\n    for (let i of [...Array(30).keys()]) {\n        rightFactor = rightFactor.map((item, index) => {\n            return (\n                item +\n                (Math.pow(-1, i) * Math.pow(sample[index], i * 2)) /\n                    Math.pow(2, i) /\n                    factorial(i) /\n                    (i * 2 + 1)\n            );\n        });\n    }\n\n    return sample.map(\n        (item, index) =>\n            0.5 + (item / Math.sqrt(2 * Math.PI)) * rightFactor[index]\n    );\n};\n\nconst Lab5 = () => {\n    const [u, setU] = useState(true);\n    const whiteNoise = getNormalSample(n);\n\n    /* Преобразование равномерно распределения белого шума в стандартизированный закон*/\n    const whiteNoiseData = whiteNoise\n        .map((item, index) => ({\n            x: index,\n            y: item\n        }))\n        .sort((a, b) => a.x - b.x);\n\n    /* Требуемые корреляционные свойства с помощью формирующего фильтра */\n\n    let mean1 = 0;\n    const X1 = new Array(n).fill(0);\n\n    for (let i of [...Array(n - 1).keys()]) {\n        X1[i + 1] = X1[i] + h * ((Kf / Tf) * whiteNoise[i] - (1 / Tf) * X1[i]);\n        mean1 += X1[i + 1];\n    }\n\n    mean1 /= n;\n\n    /* Теоретическая и эмпирические функции корреляции */\n    const corrTheoretical1 = new Array(nsteps)\n        .fill(0)\n        .map((_, i) => D * Math.exp(-alpha * i * h));\n\n    const corrEmpirical1 = [];\n    for (let j of [...Array(nsteps).keys()]) {\n        let sum = 0;\n        for (let i of [...Array(n - j).keys()]) {\n            sum += (X1[i] - mean1) * (X1[i + j] - mean1);\n        }\n        sum /= n + 1 - j;\n        corrEmpirical1.push(sum);\n    }\n\n    const theorData1 = corrTheoretical1.map((item, index) => ({\n        x: index,\n        y: item\n    }));\n    const empirData1 = corrEmpirical1.map((item, index) => ({\n        x: index,\n        y: item\n    }));\n\n    /*  Преобразование нормального закона в равномерный*/\n    const X2 = towardUniform(X1);\n    let mean2 = mean(X2);\n\n    const corrEmpirical2 = [];\n\n    for (let j of [...Array(nsteps).keys()]) {\n        let sum = 0;\n        for (let i of [...Array(n - j).keys()]) {\n            sum += (X2[i] - mean2) * (X2[i + j] - mean2);\n        }\n        sum /= n + 1 - j;\n        corrEmpirical2.push(sum);\n    }\n\n    const empirData2 = corrEmpirical2.map((item, index) => ({\n        x: index,\n        y: item\n    }));\n\n    /* Обеспечение требуемого закона распределения */\n    const X3 = [];\n    for (let i of X2) {\n        X3.push(reverseF(i));\n    }\n\n    const mean3 = mean(X3);\n\n    const corrEmpirical3 = [];\n\n    for (let j of [...Array(nsteps).keys()]) {\n        let sum = 0;\n        for (let i of [...Array(n - j).keys()]) {\n            sum += (X3[i] - mean3) * (X3[i + j] - mean3);\n        }\n        sum /= n + 1 - j;\n        corrEmpirical3.push(sum);\n    }\n\n    const empirData3 = corrEmpirical3.map((item, index) => ({\n        x: index,\n        y: item\n    }));\n    /************ */\n    return (\n        <div>\n            <button onClick={() => setU(!u)}>Сгенерировать</button>\n\n            <p>\n                Преобразование равномерного закона распределения белого шума в\n                стандартизированный нормальный закон распределения\n            </p>\n            <div style={{ maxWidth: '700px' }}>\n                <Line\n                    options={lineOptions}\n                    data={{\n                        datasets: [\n                            {\n                                data: whiteNoiseData,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'blue',\n                                label: 'Белый шум',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n                <Line\n                    options={lineOptions}\n                    data={{\n                        datasets: [\n                            {\n                                data: theorData1,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'blue',\n                                label: 'Теоретическая K(t)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            },\n                            {\n                                data: empirData1,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'green',\n                                label: 'Эмпирическая K*(t)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n                <p>\n                    Преобразование нормального закона распределения\n                    генерируемого процесса в равномерный\n                </p>\n                <Line\n                    options={lineOptions}\n                    data={{\n                        datasets: [\n                            {\n                                data: empirData2,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'green',\n                                label: 'K*(t)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n                <p>Обеспечение иребуемого закона распределения</p>\n                <Line\n                    options={lineOptions}\n                    data={{\n                        datasets: [\n                            {\n                                data: empirData3,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'green',\n                                label: 'K*(t)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Lab5;\n","import React, { useState } from 'react';\nimport { getNormalSample, towardUniform, lineOptions } from './lab5';\nimport { generateRandomValues } from './lab3';\nimport { Line } from 'react-chartjs-2';\nconst reverseF = x => Math.atan(x);\nconst D = 0.5;\nconst alpha = 2;\nconst h = 0.002;\nconst nsteps = 3 / alpha / h;\n\nconst S0 = h;\nconst Kf = Math.sqrt((2 * D) / alpha / S0);\nconst Tf = 1 / alpha;\n\nconst generateProcSample = n => {\n    const whiteNoise = getNormalSample(n);\n\n    const X1 = Array(n).fill(0);\n    for (let i of [...Array(n - 1).keys()]) {\n        X1[i + 1] = X1[i] + h * ((Kf / Tf) * whiteNoise[i] - (1 / Tf) * X1[i]);\n    }\n\n    const X2 = towardUniform(X1);\n    const X3 = X2.map(item => reverseF(item));\n    return X3;\n};\n\nconst linspace = (startValue, stopValue, cardinality) => {\n    var arr = [];\n    var step = (stopValue - startValue) / (cardinality - 1);\n    for (var i = 0; i < cardinality; i++) {\n        arr.push(startValue + step * i);\n    }\n    return arr;\n};\n\nconst ECDF = (sample, min, max, intervals) => {\n    const ecdfArray = [];\n    const sampleSize = sample.length;\n    linspace(min, max, intervals).forEach(x => {\n        const lessThenX = sample.filter(item => item < x).length;\n        ecdfArray.push(lessThenX / sampleSize);\n    });\n    return ecdfArray;\n};\n\nconst takeDelta = (arr1, arr2, size) => {\n    let delta = 0;\n\n    for (let i of [...Array(size).keys()]) {\n        const abs = Math.abs(arr1[i] - arr2[i]);\n        if (abs > delta) {\n            delta = abs;\n        }\n    }\n    return delta;\n};\n\nconst Lab6 = () => {\n    const [u, setU] = useState(true);\n    const sampleSize = 40;\n    const intervalsN = 40;\n\n    const sampleT1 = [];\n    const sampleT2 = [];\n\n    for (let i of [...Array(sampleSize).keys()]) {\n        const gsample = generateProcSample(10000);\n        sampleT1.push(gsample[10000 - 4]);\n        sampleT2.push(gsample[10000 - 1]);\n    }\n\n    const st1Size = sampleT1.length;\n    const st2Size = sampleT2.length;\n\n    const min = Math.min(...sampleT1, ...sampleT2);\n    const max = Math.max(...sampleT1, ...sampleT2);\n\n    const F1 = ECDF(sampleT1, min, max, intervalsN);\n    const F2 = ECDF(sampleT2, min, max, intervalsN);\n\n    const delta = takeDelta(F1, F2, intervalsN);\n\n    const lbmd = delta * Math.sqrt((st1Size * st2Size) / (st1Size + st2Size));\n\n    const xVals = linspace(min, max, intervalsN);\n    const f1Data = F1.map((item, index) => ({\n        x: xVals[index],\n        y: item\n    }));\n    const f2Data = F2.map((item, index) => ({\n        x: xVals[index],\n        y: item\n    }));\n\n    /* Проверка эргодичности */\n\n    const intervalsN2 = 100;\n\n    const sampleT1_2 = [];\n\n    for (let i of [...Array(sampleSize).keys()]) {\n        const gsample = generateProcSample(10000);\n        sampleT1_2.push(gsample[10000 - 3]);\n    }\n    const processSample = generateProcSample(100000);\n\n    const sampleT1_2Size = sampleT1_2.length;\n    const procSammpleSize = processSample.length;\n\n    const min2 = Math.min(...sampleT1_2, ...processSample);\n    const max2 = Math.max(...sampleT1_2, ...processSample);\n\n    const ecdf1 = ECDF(sampleT1_2, min2, max2, intervalsN2);\n    const ecdf2 = ECDF(processSample, min2, max2, intervalsN2);\n    console.log(ecdf1, ecdf2);\n\n    const delta2 = takeDelta(ecdf1, ecdf2, intervalsN2);\n\n    const lmbd2 =\n        delta2 *\n        Math.sqrt(\n            (sampleT1_2Size * procSammpleSize) /\n                (sampleT1_2Size + procSammpleSize)\n        );\n\n    const x2Vals = linspace(min2, max2, intervalsN2);\n\n    const ecdf1Data = ecdf1.map((item, index) => ({\n        x: x2Vals[index],\n        y: item\n    }));\n\n    const ecdf2Data = ecdf2.map((item, index) => ({\n        x: x2Vals[index],\n        y: item\n    }));\n\n    return (\n        <div>\n            <button onClick={() => setU(!u)}>Сгенерировать</button>\n            <p>Проверка стационарности</p>Δ = {delta}, λ={lbmd}\n            <div style={{ maxWidth: '700px' }}>\n                <Line\n                    options={lineOptions}\n                    data={{\n                        datasets: [\n                            {\n                                data: f1Data,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'blue',\n                                label: 'F*t1(x)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            },\n                            {\n                                data: f2Data,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'green',\n                                label: 'F*t2(x)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n            </div>\n              <p>Проверка эргодичности</p>Δ = {delta2}, λ={lmbd2}\n            <div style={{ maxWidth: '700px' }}>\n                <Line\n                    options={lineOptions}\n                    data={{\n                        datasets: [\n                            {\n                                data: ecdf1Data,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'blue',\n                                label: 'F*t1(x)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            },\n                            {\n                                data: ecdf2Data,\n                                steppedLine: true,\n\n                                fill: false,\n                                borderColor: 'green',\n                                label: 'F*(x)',\n                                pointRadius: 0,\n                                pointHitRadius: 0\n                            }\n                        ]\n                    }}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default Lab6;\n","import React, { useState, useRef } from 'react';\n\nconst teorQ = 0.43;\nconst teorP = 0.57;\n\nconst lambda = 15;\nconst mu = 20;\nconst targetError = 0.01;\n\nconst delta = arg => {\n    return -Math.log(1 - Math.random()) / arg;\n};\n\nconst Lab7 = () => {\n    const [u, setU] = useState(true);\n\n    let t = delta(lambda);\n    let tau = t + delta(mu);\n    let n_counter = 1;\n    let m_counter = 1;\n\n    while (t < 100) {\n        t += delta(lambda);\n        n_counter += 1;\n\n        if (t > tau) {\n            m_counter += 1;\n            tau = t + delta(mu);\n        }\n    }\n\n    let ε_p = m_counter / n_counter;\n    let ε_error = 3 * Math.sqrt((ε_p * (1 - ε_p)) / n_counter);\n    const firstAttempt = {\n        err: ε_error,\n        p: ε_p,\n        t,\n        N: n_counter,\n        M: m_counter\n    };\n\n    while (ε_error > targetError) {\n        let nRequired = Math.round((9 * ε_p * (1 - ε_p)) / targetError ** 2);\n        for (let i of [...Array(nRequired).keys()]) {\n            t += delta(lambda);\n            n_counter += 1;\n\n            if (t > tau) {\n                m_counter += 1;\n\n                tau = t + delta(mu);\n            }\n        }\n\n        ε_p = m_counter / n_counter;\n        ε_error = 3 * Math.sqrt((ε_p * (1 - ε_p)) / n_counter);\n    }\n\n    const secondAttempt = {\n        err: ε_error,\n        p: ε_p,\n        t,\n        N: n_counter,\n        M: m_counter\n    };\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    setU(!u);\n                }}\n            >\n                <button type=\"submit\">Смоделировать</button>\n            </form>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>λ</td>\n                        <td>{lambda}</td>\n                    </tr>\n                    <tr>\n                        <td>μ</td>\n                        <td>{mu}</td>\n                    </tr>\n                    <tr>\n                        <td>p</td>\n                        <td>{teorP}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <table>\n                <tbody>\n                    <tr>\n                        <td></td>\n                        <td>За 100 с.</td>\n                        <td>\n                            Спустя{' '}\n                            {(secondAttempt.t - firstAttempt.t).toFixed(0)} с.\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>t</td>\n                        <td>{firstAttempt.t.toFixed(0)}</td>\n                        <td>{secondAttempt.t.toFixed(0)}</td>\n                    </tr>\n                    <tr>\n                        <td>ε*</td>\n                        <td>{firstAttempt.err}</td>\n                        <td>{secondAttempt.err}</td>\n                    </tr>\n\n                    <tr>\n                        <td>N</td>\n                        <td>{firstAttempt.N}</td>\n                        <td>{secondAttempt.N}</td>\n                    </tr>\n                    <tr>\n                        <td>M</td>\n                        <td>{firstAttempt.M}</td>\n                        <td>{secondAttempt.M}</td>\n                    </tr>\n                    <tr>\n                        <td>p*</td>\n                        <td>{firstAttempt.p}</td>\n                        <td>{secondAttempt.p}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Lab7;\n","import React, { useState, useRef } from 'react';\n\nconst teorQ = 0.43;\n\nconst lambda = 15;\nconst mu = 20;\nconst targetError = 0.01;\nconst n = 3;\nconst m = 1;\nfunction factorial(n) {\n    if (n === 0) {\n        return 1;\n    }\n    return n != 1 ? n * factorial(n - 1) : 1;\n}\n\nconst qTeor = () => {\n    let leftBottomSum = 0;\n\n    for (let index of [...Array(n + 1).keys()]) {\n        leftBottomSum += (lambda / mu) ** index / factorial(index);\n    }\n\n    let rightBottomSum = 0;\n    for (let index of [...Array(m + 1).keys()]) {\n        if (index === 0) {\n            continue;\n        }\n\n        rightBottomSum +=\n            (lambda / mu) ** (n + index) / (factorial(n) * n ** index);\n    }\n\n    return (\n        (lambda / mu) ** (n + m) /\n        (factorial(n) * n ** m) /\n        (leftBottomSum + rightBottomSum)\n    );\n};\n\nconst teorP = 1 - qTeor();\n\nconst delta = arg => {\n    return -Math.log(1 - Math.random()) / arg;\n};\n\nconst Lab8 = () => {\n    const [u, setU] = useState(true);\n    let r = 0;\n\n    let t = 0;\n    let tau = Array(n).fill(0);\n    let N = 0;\n    let M = 0;\n\n    let ε_p = 0;\n    let ε_error = 0;\n    while (t < 100) {\n        t += delta(lambda);\n        N += 1;\n\n        const temp = t;\n\n        if (tau.filter(item => temp < item).length === n && r < m) {\n            r += 1;\n        }\n\n        for (let i of [...Array(n).keys()]) {\n            let temp = t;\n            if (t > tau[i]) {\n                if (r !== 0) {\n                    r -= 1;\n                }\n                let k = 1;\n                if (n !== 1) {\n                    k = tau.filter(item => temp < item).length;\n                }\n                tau[i] = t + delta(mu * k);\n                M += 1;\n                break;\n            }\n        }\n\n        ε_p = M / N;\n        ε_error = 3 * Math.sqrt((ε_p * (1 - ε_p)) / N);\n    }\n    const firstAttempt = {\n        err: ε_error,\n        p: ε_p,\n        t,\n        N: N,\n        M: M\n    };\n\n    while (ε_error > targetError) {\n        let nRequired = Math.round((9 * ε_p * (1 - ε_p)) / targetError ** 2);\n\n        for (let i of [...Array(nRequired).keys()]) {\n            t += delta(lambda);\n            N += 1;\n            const temp = t;\n\n            if (tau.filter(item => temp < item).length === n && r < m) {\n                r += 1;\n            }\n\n            for (let i of [...Array(n).keys()]) {\n                const temp = t;\n                if (t > tau[i]) {\n                    if (r !== 0) {\n                        r -= 1;\n                    }\n\n                    let k = 1;\n\n                    if (n !== 1) {\n                        k = tau.filter(item => temp < item).length;\n                    }\n\n                    tau[i] = t + delta(mu * k);\n                    M += 1;\n\n                    break;\n                }\n            }\n        }\n\n        ε_p = M / N;\n        ε_error = 3 * Math.sqrt((ε_p * (1 - ε_p)) / N);\n    }\n\n    const secondAttempt = {\n        err: ε_error,\n        p: ε_p,\n        t,\n        N: N,\n        M: M\n    };\n\n    return (\n        <div>\n            <form\n                onSubmit={e => {\n                    e.preventDefault();\n                    setU(!u);\n                }}\n            >\n                <button type=\"submit\">Смоделировать</button>\n            </form>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>λ</td>\n                        <td>{lambda}</td>\n                    </tr>\n                    <tr>\n                        <td>μ</td>\n                        <td>{mu}</td>\n                    </tr>\n                    <tr>\n                        <td>p</td>\n                        <td>{teorP}</td>\n                    </tr>\n                    <tr>\n                        <td>m</td>\n                        <td>{m}</td>\n                    </tr>\n                    <tr>\n                        <td>n</td>\n                        <td>{n}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <table>\n                <tbody>\n                    <tr>\n                        <td></td>\n                        <td>За 100 с.</td>\n                        <td>\n                            Спустя{' '}\n                            {(secondAttempt.t - firstAttempt.t).toFixed(0)} с.\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>t</td>\n                        <td>{firstAttempt.t.toFixed(0)}</td>\n                        <td>{secondAttempt.t.toFixed(0)}</td>\n                    </tr>\n                    <tr>\n                        <td>ε*</td>\n                        <td>{firstAttempt.err}</td>\n                        <td>{secondAttempt.err}</td>\n                    </tr>\n\n                    <tr>\n                        <td>N</td>\n                        <td>{firstAttempt.N}</td>\n                        <td>{secondAttempt.N}</td>\n                    </tr>\n                    <tr>\n                        <td>M</td>\n                        <td>{firstAttempt.M}</td>\n                        <td>{secondAttempt.M}</td>\n                    </tr>\n                    <tr>\n                        <td>p*</td>\n                        <td>{firstAttempt.p}</td>\n                        <td>{secondAttempt.p}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Lab8;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n    return (\n        <ol start={3}>\n            {/* <li>\n                <Link to=\"/lab1\">\n                    Программная реализация имитационной модели нелинейной\n                    динамической системы\n                </Link>\n            </li>\n            <li>\n                <Link to=\"/lab2\">\n                    Имитационное моделирование детерменированного конечного\n                    автомата\n                </Link>´\n            </li> */}\n            <li>\n                <Link to=\"/lab3\">\n                    Проектирование генератора случайных чисел с заданным законом\n                    распределения\n                </Link>\n            </li>\n            <li>\n                <Link to=\"/lab4\">\n                    Построение генератора случайного процесса методом\n                    формирующего фильтра\n                </Link>\n            </li>\n            <li>\n                <Link to=\"/lab5\">\n                    Построение генератора случайного процесса с заданным законом\n                    распределения и корреляционной функцией\n                </Link>\n            </li>\n            <li>\n                <Link to=\"/lab6\">\n                    Проверка стационарности и эргодичности случайного процесса\n                </Link>\n            </li>\n            <li>\n                <Link to=\"/lab7\">\n                    Статистическое имитационное моделирование одноканальной\n                    системы массового обслуживания с отказами\n                </Link>\n            </li>\n            <li>\n                <Link to=\"/lab8\">\n                    Статистическое имитационное моделирование многоканальной\n                    системы массового обслуживания\n                </Link>\n            </li>\n        </ol>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route, Link } from 'react-router-dom';\nimport Lab1 from './labs/lab1';\nimport Lab2 from './labs/lab2';\nimport Lab3 from './labs/lab3';\nimport Lab4 from './labs/lab4';\nimport Lab5 from './labs/lab5';\nimport Lab6 from './labs/lab6';\nimport Lab7 from './labs/lab7';\nimport Lab8 from './labs/lab8';\n\nimport Home from './Home';\n\n/* Модель 1 вариант 3 */\n\nconst App = () => {\n    return (\n        <div>\n            <Switch>\n                <Route path=\"/:any\">\n                    <div>\n                        <Link to=\"/\">К списку работ</Link>\n                    </div>\n                </Route>\n            </Switch>\n            <Switch>\n                <Route exact path=\"/\">\n                    <Home />\n                </Route>\n                {/* <Route path=\"/lab1\">\n                    <Lab1 />\n                </Route>\n                <Route path=\"/lab2\">\n                    <Lab2 />\n                </Route> */}\n                <Route path=\"/lab3\">\n                    <Lab3 />\n                </Route>\n                <Route path=\"/lab4\">\n                    <Lab4 />\n                </Route>\n                <Route path=\"/lab5\">\n                    <Lab5 />\n                </Route>\n                <Route path=\"/lab6\">\n                    <Lab6 />\n                </Route>\n                <Route path=\"/lab7\">\n                    <Lab7 />\n                </Route>\n                <Route path=\"/lab8\">\n                    <Lab8 />\n                </Route>\n            </Switch>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}