{"version":3,"sources":["labs/lab1.jsx","labs/lab2.jsx","labs/lab3.jsx","Home.jsx","App.js","index.js"],"names":["Lab1","useState","defaultH","setH","x1","x2","x3","x4","x5","initialXValues","setInitialXValues","time","xArrays","hArray","deltaArray","numberOfStepsArray","graphsData","setGraphData","p","a","m","u","cx","cy","m1","m2","T","g","constants","setConstants","Euler","step","numberOfSteps","i","t","Math","sin","push","lastValues","calculate","optimal","delta","h","temp","xArraysWithLowerH","lastValuesWithLowerH","newTime","abs","withoutOptimization","data","xLabel","yLabel","map","key","index","x","y","console","log","className","Object","entries","value","defaultValue","onChange","e","target","type","onClick","item","options","scales","xAxes","scaleLabel","display","labelString","yAxes","legend","datasets","fill","borderColor","TRANS","OUT","Lab2","textarea","useRef","z","setZ","setX","setY","useEffect","current","Array","arr","indx","ref","style","width","height","disabled","reverseF","atan","Lab3","n","setUpd","arraySize","setArraySize","reverseValues","random","sort","b","statValues","Fvalues","deltaP","min","max","floor","before","Date","now","forEach","FValue","tan","F","statValue","deltaX","parts","minValue","maxValue","size","val","mappedParts","part","V","P","mean","reduce","sum","variance","lambda","sqrt","isOk","FChartData","statChartData","after","onKeyPress","animation","duration","hover","animationDuration","responsiveAnimationDuration","elements","line","tension","label","pointRadius","pointHitRadius","colSpan","toFixed","color","Home","to","App","path","exact","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.00571c1f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"../App.css\";\n\nimport { Line } from \"react-chartjs-2\";\n\n/* Модель 1 вариант 3 */\n\nconst Lab1 = () => {\n  const [defaultH, setH] = useState(0.1);\n  const [initialXValues, setInitialXValues] = useState({\n    x1: 1800,\n    x2: 0.8,\n    x3: 0,\n    x4: 0,\n    x5: 0.8\n  });\n  const [graphsData, setGraphData] = useState({\n    time: [],\n    xArrays: [],\n    hArray: [],\n    deltaArray: [],\n    numberOfStepsArray: []\n  });\n\n  const [constants, setConstants] = useState({\n    p: 100000,\n    a: 0.5,\n    m: 2000,\n    u: 20,\n    cx: 0.03,\n    cy: 0.002,\n    m1: 0.05,\n    m2: 0.01,\n    T: 12,\n    g: 9.81\n  });\n\n  const { p, a, m, u, cx, cy, m1, m2, T, g } = constants;\n\n  const Euler = step => {\n    const time = [0];\n    let { x1, x2, x3, x4, x5 } = { ...initialXValues };\n\n    const xArrays = {\n      x1: [x1],\n      x2: [x2],\n      x3: [x3],\n      x4: [x4],\n      x5: [x5]\n    };\n\n    let numberOfSteps = 0;\n    for (let i = 0; i <= T; i += step) {\n      numberOfSteps += 1;\n    }\n\n    for (let i = 1; i < numberOfSteps; i++) {\n      const t = i * step;\n\n      x1 += step * (-g * Math.sin(x2) + (p - a * cx * x1 ** 2) / (m - u * t));\n      x2 +=\n        step *\n        ((-g + (p * Math.sin(x5 - x2) + a * cy * x1 ** 2) / (m - u * t)) / x1);\n      x3 +=\n        step *\n        ((m1 * a * (x2 - x5) * x1 ** 2 - m2 * a * x1 ** 2 * x3) / (m - u * t));\n      x4 += step * (x1 * Math.sin(x2));\n      x5 += step * x3;\n\n      xArrays.x1.push(x1);\n      xArrays.x2.push(x2);\n      xArrays.x3.push(x3);\n      xArrays.x4.push(x4);\n      xArrays.x5.push(x5);\n      time.push(t);\n    }\n    const lastValues = { x1, x2, x3, x4, x5 };\n\n    return { xArrays, time, numberOfSteps, lastValues };\n  };\n\n  const calculate = (optimal = false) => {\n    let delta = 100;\n    const deltaArray = [100];\n\n    let h = defaultH;\n    const hArray = [defaultH];\n    let temp = 0;\n    for (let i = 0; i < T + h; i += h) {\n      temp += 1;\n    }\n\n    let time,\n      xArrays,\n      numberOfStepsArray = [temp];\n\n    if (optimal) {\n      while (delta > 0.001) {\n        const { lastValues } = Euler(h);\n\n        const {\n          xArrays: xArraysWithLowerH,\n          lastValues: lastValuesWithLowerH,\n          time: newTime,\n          numberOfSteps\n        } = Euler(h / 2);\n        numberOfStepsArray.push(numberOfSteps);\n        time = newTime;\n\n        xArrays = xArraysWithLowerH;\n        delta = Math.abs(\n          (lastValues.x4 - lastValuesWithLowerH.x4) / lastValuesWithLowerH.x4\n        );\n\n        h = h / 2;\n        hArray.push(h);\n        deltaArray.push(delta);\n      }\n    } else {\n      const withoutOptimization = Euler(h);\n      xArrays = withoutOptimization.xArrays;\n      time = withoutOptimization.time;\n      numberOfStepsArray = [withoutOptimization.numberOfSteps];\n    }\n\n    return { xArrays, time, numberOfStepsArray, hArray, deltaArray, h };\n  };\n\n  const {\n    time,\n    xArrays,\n    hArray,\n    deltaArray = [],\n    numberOfStepsArray\n  } = graphsData;\n\n  const data1 = {\n    xLabel: \"Время\",\n    yLabel: \"x1\",\n    data: time.map((key, index) => ({ x: key, y: xArrays.x1[index] }))\n  };\n  const data2 = {\n    xLabel: \"Время\",\n    yLabel: \"x2\",\n    data: time.map((key, index) => ({ x: key, y: xArrays.x2[index] }))\n  };\n  const data3 = {\n    xLabel: \"Время\",\n    yLabel: \"x3\",\n    data: time.map((key, index) => ({ x: key, y: xArrays.x3[index] }))\n  };\n  const data4 = {\n    xLabel: \"Время\",\n    yLabel: \"x4\",\n    data: time.map((key, index) => ({ x: key, y: xArrays.x4[index] }))\n  };\n  const data5 = {\n    xLabel: \"Время\",\n    yLabel: \"x5\",\n    data: time.map((key, index) => ({ x: key, y: xArrays.x5[index] }))\n  };\n\n  const dataDelta = {\n    xLabel: \"Шаг\",\n    yLabel: \"delta\",\n    data: hArray.map((key, index) => ({ x: key, y: deltaArray[index] }))\n  };\n  const dataSteps = {\n    xLabel: \"Шаг\",\n    yLabel: \"Количество шагов\",\n    data: hArray.map((key, index) => ({ x: key, y: numberOfStepsArray[index] }))\n  };\n\n  const data = [data1, data2, data3, data4, data5, dataDelta, dataSteps];\n\n  console.log(constants, graphsData, defaultH);\n  return (\n    <>\n      <header>\n        <div className=\"parametersWrapper\">\n          <h2>Значения коэффициентов</h2>\n          <ul className=\"list\">\n            {Object.entries(constants).map(([key, value], index) => {\n              return (\n                <li key={index}>\n                  <label>\n                    <span className=\"inputLabel\">{key}</span>\n                    <input\n                      defaultValue={value}\n                      onChange={e => {\n                        setConstants({\n                          ...constants,\n                          [key]: +e.target.value\n                        });\n                      }}\n                    />\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        <div className=\"parametersWrapper\">\n          <h2>Начальные значения</h2>\n          <ul className=\"list\">\n            {Object.entries(initialXValues).map(([key, value], index) => {\n              return (\n                <li key={index}>\n                  <label>\n                    <span className=\"inputLabel\">\n                      x<sub>{key}</sub>\n                    </span>\n                    <input\n                      defaultValue={value}\n                      onChange={e => {\n                        setInitialXValues({\n                          ...initialXValues,\n                          [key]: +e.target.value\n                        });\n                      }}\n                    />\n                  </label>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </header>\n      <div>\n        <input\n          type=\"button\"\n          onClick={() => setGraphData(calculate(false))}\n          value=\"Посчитать с заданным шагом\"\n        />\n        <input\n          defaultValue={defaultH}\n          onChange={e => {\n            setH(+e.target.value);\n          }}\n        />\n      </div>\n      <input\n        type=\"button\"\n        onClick={() => setGraphData(calculate(true))}\n        value=\"Посчитать с точностью 1%\"\n      />\n\n      <div className=\"gridContainer\">\n        {data.map((item, key) => (\n          <div key={key}>\n            <Line\n              options={{\n                scales: {\n                  xAxes: [\n                    {\n                      type: \"linear\",\n                      scaleLabel: {\n                        display: true,\n                        labelString: item.xLabel\n                      }\n                    }\n                  ],\n                  yAxes: [\n                    {\n                      scaleLabel: {\n                        display: true,\n                        labelString: item.yLabel\n                      }\n                    }\n                  ]\n                },\n                legend: {\n                  display: false\n                }\n              }}\n              data={{\n                datasets: [\n                  {\n                    data: item.data,\n                    fill: false,\n                    borderColor: \"blue\"\n                  }\n                ]\n              }}\n            />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Lab1;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"../App.css\";\n\n/* \nВариант 3 - автомат Мили\nВходов - 2\nВыходов - 2\nСостояний - 4\n*/\n\nconst TRANS = [\n  [3, 2, 1, 0],\n  [1, 0, 3, 2]\n];\n\nconst OUT = [\n  [0, 0, 1, 1],\n  [0, 1, 1, 0]\n];\n\nconst Lab2 = () => {\n  const textarea = useRef(null);\n\n  const [z, setZ] = useState(0);\n  const [x, setX] = useState(\"-\");\n  const [y, setY] = useState(\"-\");\n\n  useEffect(() => {\n    if (x !== \"-\") {\n      textarea.current.value += `Вход X${x + 1} -> Состояние Z${z +\n        1} -> Выход Y${y + 1}\\n`;\n    }\n  });\n  return (\n    <div>\n      <p>Таблица переходов</p>\n      <table>\n        <tbody>\n          <tr>\n            <td />\n            {[...new Array(4)].map((item, i) => (\n              <th key={i}>\n                Z<sub>{i + 1}</sub>\n              </th>\n            ))}\n          </tr>\n          {TRANS.map((arr, i) => {\n            return (\n              <tr key={i}>\n                <th>\n                  X<sub>{i + 1}</sub>\n                </th>\n                {arr.map((item, indx) => (\n                  <td key={indx}>\n                    Z<sub>{item + 1}</sub>\n                  </td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <p>Таблица выходов</p>\n      <table>\n        <tbody>\n          <tr>\n            <td />\n            {[...new Array(4)].map((item, i) => (\n              <th key={i}>\n                Z<sub>{i + 1}</sub>\n              </th>\n            ))}\n          </tr>\n          {OUT.map((arr, i) => {\n            return (\n              <tr key={i}>\n                <th>\n                  X<sub>{i + 1}</sub>\n                </th>\n                {arr.map((item, indx) => (\n                  <td key={indx}>\n                    Y<sub>{item + 1}</sub>\n                  </td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <p>\n        Текущее состояние автомата - <b>X{z + 1}</b>\n      </p>\n      <div>\n        {[...new Array(2)].map((item, i) => {\n          return (\n            <input\n              key={i}\n              type=\"button\"\n              onClick={() => {\n                setZ(TRANS[i][z]);\n                setX(i);\n                setY(OUT[i][z]);\n              }}\n              value={`Подать на вход X${i + 1}`}\n            />\n          );\n        })}\n      </div>\n      <textarea\n        ref={textarea}\n        style={{ width: \"320px\", height: \"300px\" }}\n        disabled\n      ></textarea>\n    </div>\n  );\n};\n\nexport default Lab2;\n","import React, { useState } from 'react';\nimport '../App.css';\nimport { Line } from 'react-chartjs-2';\nimport Zoom from 'chartjs-plugin-zoom';\n\n/* \nВариант 3 \nКритерий согласия Колмогорова\n*/\nconst analyticExpectedValue = 0.438;\nconst analyticVariance = 0.053;\n// const min = 0;\n// const max = Math.PI / 4;\nconst constLambda = 1.22;\nconst constP = 0.1;\n\n/* Плотность распределения */\nconst f = x => {\n    return 1 / (1 - Math.sin(x) ** 2);\n};\n\n/* Функция распределения */\nconst F = x => Math.tan(x);\n\n/* Обратная первообразной функция*/\nconst reverseF = x => Math.atan(x);\n\n/* Статистическая функция распределения */\n// const statFunction = sortedArr => {\n//     const len = sortedArr.length;\n//     const res = sortedArr.map((_, index) => (index + 1) / len);\n//     return res;\n// };\n\nconst generateRandomValues = n => {\n    return [...new Array(n)].map(() => {\n        return Math.random();\n    });\n};\n\nconst Lab3 = () => {\n    const [u, setUpd] = useState(true);\n    const [arraySize, setArraySize] = useState(50);\n\n    /* Генерируем arraySize случайных чисел */\n    const randomNumbers = generateRandomValues(arraySize).sort((a, b) => a - b);\n\n    /* Находим значения обратной функции */\n    const reverseValues = randomNumbers.map(reverseF);\n\n    const statValues = [];\n    const Fvalues = [];\n    let deltaP = 0;\n    let min = 1;\n    let max = 0;\n\n    const m = arraySize > 500 ? 30 : Math.floor(arraySize / (15 / 20));\n\n    const before = Date.now();\n    reverseValues.forEach((x, index) => {\n        const FValue = F(x);\n\n        if (FValue < min) {\n            min = FValue;\n        }\n\n        if (FValue > max) {\n            max = FValue;\n        }\n        const statValue = (index + 1) / arraySize;\n\n        const delta = Math.abs(FValue - statValue);\n\n        if (delta > deltaP) {\n            deltaP = delta;\n        }\n\n        statValues.push(statValue);\n        Fvalues.push(FValue);\n    });\n\n    const deltaX = (max - min) / m;\n\n    const parts = [];\n\n    let i = 0;\n\n    while (i < m) {\n        const minValue = min + deltaX * i;\n        const maxValue = minValue + deltaX;\n        parts[i] = {\n            minValue,\n            maxValue,\n            data: [],\n            size: 0\n        };\n        i++;\n    }\n\n    reverseValues.forEach(val => {\n        parts.forEach(item => {\n            const { minValue, maxValue } = item;\n            if (val >= minValue && val <= maxValue) {\n                item.size += 1;\n                item.data.push(val);\n            }\n        });\n    });\n\n    const mappedParts = parts.map(part => ({\n        V: (part.minValue + part.maxValue) / 2,\n        P: part.size / arraySize\n    }));\n\n    const mean = mappedParts.reduce((sum, item) => sum + item.P * item.V, 0);\n    const variance = mappedParts.reduce(\n        (sum, item) => sum + item.P * (item.V - mean) ** 2,\n        0\n    );\n\n    const lambda = deltaP * Math.sqrt(arraySize);\n    const isOk = lambda <= constLambda;\n\n    /* Преобразуем в формат графика */\n    const FChartData = reverseValues.map((item, i) => ({\n        x: item,\n        y: Fvalues[i]\n    }));\n\n    const statChartData = reverseValues.map((item, i) => ({\n        x: item,\n        y: statValues[i]\n    }));\n\n    const after = Date.now();\n    console.log('Time', after - before);\n    return (\n        <div>\n            <label>\n                <div>Размер выборки</div>\n                <input\n                    type=\"number\"\n                    defaultValue={arraySize}\n                    onKeyPress={e => {\n                        if (e.key === 'Enter') {\n                            setArraySize(+e.target.value);\n                            setUpd(!u);\n                        }\n                    }}\n                />\n            </label>\n            <Line\n                width={300}\n                options={{\n                    animation: {\n                        duration: 0\n                    },\n                    hover: {\n                        animationDuration: 0\n                    },\n                    responsiveAnimationDuration: 0,\n                    elements: {\n                        line: {\n                            tension: 0\n                        }\n                    },\n                    scales: {\n                        xAxes: [\n                            {\n                                type: 'linear',\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'Xi'\n                                }\n                            }\n                        ],\n                        yAxes: [\n                            {\n                                scaleLabel: {\n                                    display: true,\n                                    labelString: 'F(x)'\n                                }\n                            }\n                        ]\n                    },\n                    legend: {\n                        display: true\n                    }\n                }}\n                data={{\n                    datasets: [\n                        {\n                            data: statChartData,\n                            fill: false,\n                            borderColor: 'blue',\n                            label: 'F*(x)',\n                            pointRadius: 0,\n                            pointHitRadius: 0\n                        },\n                        {\n                            data: FChartData,\n                            fill: false,\n                            borderColor: 'green',\n                            label: 'F(x)',\n                            pointRadius: 0,\n                            pointHitRadius: 0\n                        }\n                    ]\n                }}\n            />\n\n            <table>\n                <tbody>\n                    <tr>\n                        <th>\n                            Δ<sub>p</sub>\n                        </th>\n                        <td colSpan={2}>{deltaP.toFixed(3)}</td>\n                    </tr>\n                    <tr>\n                        <th>\n                            λ<sub>p</sub>\n                        </th>\n                        <td colSpan={2}>\n                            <b style={{ color: isOk ? 'green' : 'red' }}>\n                                {lambda.toFixed(4)}\n                            </b>\n                            <b>\n                                {isOk ? '⩽' : '>'} {constLambda}\n                            </b>\n                        </td>\n                    </tr>\n                    <tr>\n                        <th colSpan={3}>Параметры распределения</th>\n                    </tr>\n                    <tr>\n                        <th></th>\n                        <th>Теоретический</th>\n                        <th>Эмпирический</th>\n                    </tr>\n\n                    <tr>\n                        <th>Мат. ожидание</th>\n                        <th>{analyticExpectedValue}</th>\n                        <th>{mean.toFixed(3)}</th>\n                    </tr>\n                    <tr>\n                        <th>Дисперсия</th>\n                        <th>{analyticVariance}</th>\n                        <th>{variance.toFixed(3)}</th>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default Lab3;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Home = () => {\n  return (\n    <ol>\n      <li>\n        <Link to=\"/lab1\">\n          Программная реализация имитационной модели нелинейной динамической\n          системы\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/lab2\">\n          Имитационное моделирование детерменированного конечного автомата\n        </Link>\n      </li>\n      <li>\n        <Link to=\"/lab3\">\n          Проектирование генератора случайных чисел с заданным законом распределения\n        </Link>\n      </li>\n    </ol>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Lab1 from \"./labs/lab1\";\nimport Lab2 from \"./labs/lab2\";\nimport Lab3 from \"./labs/lab3\";\n\nimport Home from \"./Home\";\n\n/* Модель 1 вариант 3 */\n\nconst App = () => {\n  return (\n    <div>\n      <Switch>\n        <Route path=\"/:any\">\n          <div>\n            <Link to=\"/\">К списку работ</Link>\n          </div>\n        </Route>\n      </Switch>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route path=\"/lab1\">\n          <Lab1 />\n        </Route>\n        <Route path=\"/lab2\">\n          <Lab2 />\n        </Route>\n        <Route path=\"/lab3\">\n          <Lab3 />\n        </Route>\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}