{"version":3,"sources":["labs/lab1.jsx","labs/lab2.jsx","labs/lab3.jsx","labs/lab4.jsx","labs/lab5.jsx","labs/lab6.jsx","labs/lab7.jsx","labs/lab8.jsx","Home.jsx","App.js","index.js"],"names":["Lab1","useState","defaultH","setH","x1","x2","x3","x4","x5","initialXValues","setInitialXValues","time","xArrays","hArray","deltaArray","numberOfStepsArray","graphsData","setGraphData","p","a","m","u","cx","cy","m1","m2","T","g","constants","setConstants","Euler","step","numberOfSteps","i","t","Math","sin","push","lastValues","calculate","optimal","delta","h","temp","xArraysWithLowerH","lastValuesWithLowerH","newTime","abs","withoutOptimization","data","xLabel","yLabel","map","key","index","x","y","console","log","className","Object","entries","value","defaultValue","onChange","e","target","type","onClick","item","options","scales","xAxes","scaleLabel","display","labelString","yAxes","legend","datasets","fill","borderColor","TRANS","OUT","Lab2","textarea","useRef","z","setZ","setX","setY","useEffect","current","Array","arr","indx","ref","style","width","height","disabled","reverseF","atan","generateRandomValues","n","random","Lab3","setUpd","arraySize","setArraySize","reverseValues","sort","b","statValues","Fvalues","deltaP","min","max","floor","before","Date","now","forEach","FValue","tan","F","statValue","deltaX","parts","minValue","maxValue","size","val","mappedParts","part","V","P","mean","reduce","sum","variance","lambda","sqrt","isOk","FChartData","statChartData","after","onKeyPress","maxWidth","animation","duration","hover","animationDuration","responsiveAnimationDuration","elements","line","tension","label","pointRadius","pointHitRadius","colSpan","toFixed","color","Kf","Lab4","setU","whiteNoise","X","keys","corrTheoretical","_","exp","corrEmpirical","j","theorData","empirData","Lab5","normalSample","length","v1","v2","s","r","slice","getNormalSample","mean1","X1","corrTheoretical1","corrEmpirical1","theorData1","empirData1","Lab6","arg","Lab7","tau","n_counter","m_counter","ε_p","ε_error","firstAttempt","err","N","M","nRequired","round","secondAttempt","onSubmit","preventDefault","Lab8","Home","to","App","path","exact","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.c2f9a2db.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../App.css\";\r\n\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\n/* Модель 1 вариант 3 */\r\n\r\nconst Lab1 = () => {\r\n  const [defaultH, setH] = useState(0.1);\r\n  const [initialXValues, setInitialXValues] = useState({\r\n    x1: 1800,\r\n    x2: 0.8,\r\n    x3: 0,\r\n    x4: 0,\r\n    x5: 0.8\r\n  });\r\n  const [graphsData, setGraphData] = useState({\r\n    time: [],\r\n    xArrays: [],\r\n    hArray: [],\r\n    deltaArray: [],\r\n    numberOfStepsArray: []\r\n  });\r\n\r\n  const [constants, setConstants] = useState({\r\n    p: 100000,\r\n    a: 0.5,\r\n    m: 2000,\r\n    u: 20,\r\n    cx: 0.03,\r\n    cy: 0.002,\r\n    m1: 0.05,\r\n    m2: 0.01,\r\n    T: 12,\r\n    g: 9.81\r\n  });\r\n\r\n  const { p, a, m, u, cx, cy, m1, m2, T, g } = constants;\r\n\r\n  const Euler = step => {\r\n    const time = [0];\r\n    let { x1, x2, x3, x4, x5 } = { ...initialXValues };\r\n\r\n    const xArrays = {\r\n      x1: [x1],\r\n      x2: [x2],\r\n      x3: [x3],\r\n      x4: [x4],\r\n      x5: [x5]\r\n    };\r\n\r\n    let numberOfSteps = 0;\r\n    for (let i = 0; i <= T; i += step) {\r\n      numberOfSteps += 1;\r\n    }\r\n\r\n    for (let i = 1; i < numberOfSteps; i++) {\r\n      const t = i * step;\r\n\r\n      x1 += step * (-g * Math.sin(x2) + (p - a * cx * x1 ** 2) / (m - u * t));\r\n      x2 +=\r\n        step *\r\n        ((-g + (p * Math.sin(x5 - x2) + a * cy * x1 ** 2) / (m - u * t)) / x1);\r\n      x3 +=\r\n        step *\r\n        ((m1 * a * (x2 - x5) * x1 ** 2 - m2 * a * x1 ** 2 * x3) / (m - u * t));\r\n      x4 += step * (x1 * Math.sin(x2));\r\n      x5 += step * x3;\r\n\r\n      xArrays.x1.push(x1);\r\n      xArrays.x2.push(x2);\r\n      xArrays.x3.push(x3);\r\n      xArrays.x4.push(x4);\r\n      xArrays.x5.push(x5);\r\n      time.push(t);\r\n    }\r\n    const lastValues = { x1, x2, x3, x4, x5 };\r\n\r\n    return { xArrays, time, numberOfSteps, lastValues };\r\n  };\r\n\r\n  const calculate = (optimal = false) => {\r\n    let delta = 100;\r\n    const deltaArray = [100];\r\n\r\n    let h = defaultH;\r\n    const hArray = [defaultH];\r\n    let temp = 0;\r\n    for (let i = 0; i < T + h; i += h) {\r\n      temp += 1;\r\n    }\r\n\r\n    let time,\r\n      xArrays,\r\n      numberOfStepsArray = [temp];\r\n\r\n    if (optimal) {\r\n      while (delta > 0.001) {\r\n        const { lastValues } = Euler(h);\r\n\r\n        const {\r\n          xArrays: xArraysWithLowerH,\r\n          lastValues: lastValuesWithLowerH,\r\n          time: newTime,\r\n          numberOfSteps\r\n        } = Euler(h / 2);\r\n        numberOfStepsArray.push(numberOfSteps);\r\n        time = newTime;\r\n\r\n        xArrays = xArraysWithLowerH;\r\n        delta = Math.abs(\r\n          (lastValues.x4 - lastValuesWithLowerH.x4) / lastValuesWithLowerH.x4\r\n        );\r\n\r\n        h = h / 2;\r\n        hArray.push(h);\r\n        deltaArray.push(delta);\r\n      }\r\n    } else {\r\n      const withoutOptimization = Euler(h);\r\n      xArrays = withoutOptimization.xArrays;\r\n      time = withoutOptimization.time;\r\n      numberOfStepsArray = [withoutOptimization.numberOfSteps];\r\n    }\r\n\r\n    return { xArrays, time, numberOfStepsArray, hArray, deltaArray, h };\r\n  };\r\n\r\n  const {\r\n    time,\r\n    xArrays,\r\n    hArray,\r\n    deltaArray = [],\r\n    numberOfStepsArray\r\n  } = graphsData;\r\n\r\n  const data1 = {\r\n    xLabel: \"Время\",\r\n    yLabel: \"x1\",\r\n    data: time.map((key, index) => ({ x: key, y: xArrays.x1[index] }))\r\n  };\r\n  const data2 = {\r\n    xLabel: \"Время\",\r\n    yLabel: \"x2\",\r\n    data: time.map((key, index) => ({ x: key, y: xArrays.x2[index] }))\r\n  };\r\n  const data3 = {\r\n    xLabel: \"Время\",\r\n    yLabel: \"x3\",\r\n    data: time.map((key, index) => ({ x: key, y: xArrays.x3[index] }))\r\n  };\r\n  const data4 = {\r\n    xLabel: \"Время\",\r\n    yLabel: \"x4\",\r\n    data: time.map((key, index) => ({ x: key, y: xArrays.x4[index] }))\r\n  };\r\n  const data5 = {\r\n    xLabel: \"Время\",\r\n    yLabel: \"x5\",\r\n    data: time.map((key, index) => ({ x: key, y: xArrays.x5[index] }))\r\n  };\r\n\r\n  const dataDelta = {\r\n    xLabel: \"Шаг\",\r\n    yLabel: \"delta\",\r\n    data: hArray.map((key, index) => ({ x: key, y: deltaArray[index] }))\r\n  };\r\n  const dataSteps = {\r\n    xLabel: \"Шаг\",\r\n    yLabel: \"Количество шагов\",\r\n    data: hArray.map((key, index) => ({ x: key, y: numberOfStepsArray[index] }))\r\n  };\r\n\r\n  const data = [data1, data2, data3, data4, data5, dataDelta, dataSteps];\r\n\r\n  console.log(constants, graphsData, defaultH);\r\n  return (\r\n    <>\r\n      <header>\r\n        <div className=\"parametersWrapper\">\r\n          <h2>Значения коэффициентов</h2>\r\n          <ul className=\"list\">\r\n            {Object.entries(constants).map(([key, value], index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <label>\r\n                    <span className=\"inputLabel\">{key}</span>\r\n                    <input\r\n                      defaultValue={value}\r\n                      onChange={e => {\r\n                        setConstants({\r\n                          ...constants,\r\n                          [key]: +e.target.value\r\n                        });\r\n                      }}\r\n                    />\r\n                  </label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n        <div className=\"parametersWrapper\">\r\n          <h2>Начальные значения</h2>\r\n          <ul className=\"list\">\r\n            {Object.entries(initialXValues).map(([key, value], index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <label>\r\n                    <span className=\"inputLabel\">\r\n                      x<sub>{key}</sub>\r\n                    </span>\r\n                    <input\r\n                      defaultValue={value}\r\n                      onChange={e => {\r\n                        setInitialXValues({\r\n                          ...initialXValues,\r\n                          [key]: +e.target.value\r\n                        });\r\n                      }}\r\n                    />\r\n                  </label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </div>\r\n      </header>\r\n      <div>\r\n        <input\r\n          type=\"button\"\r\n          onClick={() => setGraphData(calculate(false))}\r\n          value=\"Посчитать с заданным шагом\"\r\n        />\r\n        <input\r\n          defaultValue={defaultH}\r\n          onChange={e => {\r\n            setH(+e.target.value);\r\n          }}\r\n        />\r\n      </div>\r\n      <input\r\n        type=\"button\"\r\n        onClick={() => setGraphData(calculate(true))}\r\n        value=\"Посчитать с точностью 1%\"\r\n      />\r\n\r\n      <div className=\"gridContainer\">\r\n        {data.map((item, key) => (\r\n          <div key={key}>\r\n            <Line\r\n              options={{\r\n                scales: {\r\n                  xAxes: [\r\n                    {\r\n                      type: \"linear\",\r\n                      scaleLabel: {\r\n                        display: true,\r\n                        labelString: item.xLabel\r\n                      }\r\n                    }\r\n                  ],\r\n                  yAxes: [\r\n                    {\r\n                      scaleLabel: {\r\n                        display: true,\r\n                        labelString: item.yLabel\r\n                      }\r\n                    }\r\n                  ]\r\n                },\r\n                legend: {\r\n                  display: false\r\n                }\r\n              }}\r\n              data={{\r\n                datasets: [\r\n                  {\r\n                    data: item.data,\r\n                    fill: false,\r\n                    borderColor: \"blue\"\r\n                  }\r\n                ]\r\n              }}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Lab1;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport \"../App.css\";\r\n\r\n/* \r\nВариант 3 - автомат Мили\r\nВходов - 2\r\nВыходов - 2\r\nСостояний - 4\r\n*/\r\n\r\nconst TRANS = [\r\n  [3, 2, 1, 0],\r\n  [1, 0, 3, 2]\r\n];\r\n\r\nconst OUT = [\r\n  [0, 0, 1, 1],\r\n  [0, 1, 1, 0]\r\n];\r\n\r\nconst Lab2 = () => {\r\n  const textarea = useRef(null);\r\n\r\n  const [z, setZ] = useState(0);\r\n  const [x, setX] = useState(\"-\");\r\n  const [y, setY] = useState(\"-\");\r\n\r\n  useEffect(() => {\r\n    if (x !== \"-\") {\r\n      textarea.current.value += `Вход X${x + 1} -> Состояние Z${z +\r\n        1} -> Выход Y${y + 1}\\n`;\r\n    }\r\n  });\r\n  return (\r\n    <div>\r\n      <p>Таблица переходов</p>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td />\r\n            {[...new Array(4)].map((item, i) => (\r\n              <th key={i}>\r\n                Z<sub>{i + 1}</sub>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n          {TRANS.map((arr, i) => {\r\n            return (\r\n              <tr key={i}>\r\n                <th>\r\n                  X<sub>{i + 1}</sub>\r\n                </th>\r\n                {arr.map((item, indx) => (\r\n                  <td key={indx}>\r\n                    Z<sub>{item + 1}</sub>\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n\r\n      <p>Таблица выходов</p>\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td />\r\n            {[...new Array(4)].map((item, i) => (\r\n              <th key={i}>\r\n                Z<sub>{i + 1}</sub>\r\n              </th>\r\n            ))}\r\n          </tr>\r\n          {OUT.map((arr, i) => {\r\n            return (\r\n              <tr key={i}>\r\n                <th>\r\n                  X<sub>{i + 1}</sub>\r\n                </th>\r\n                {arr.map((item, indx) => (\r\n                  <td key={indx}>\r\n                    Y<sub>{item + 1}</sub>\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n\r\n      <p>\r\n        Текущее состояние автомата - <b>X{z + 1}</b>\r\n      </p>\r\n      <div>\r\n        {[...new Array(2)].map((item, i) => {\r\n          return (\r\n            <input\r\n              key={i}\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setZ(TRANS[i][z]);\r\n                setX(i);\r\n                setY(OUT[i][z]);\r\n              }}\r\n              value={`Подать на вход X${i + 1}`}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <textarea\r\n        ref={textarea}\r\n        style={{ width: \"320px\", height: \"300px\" }}\r\n        disabled\r\n      ></textarea>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lab2;\r\n","import React, { useState } from 'react';\r\nimport '../App.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Zoom from 'chartjs-plugin-zoom';\r\n\r\n/* \r\nВариант 3 \r\nКритерий согласия Колмогорова\r\n*/\r\nconst analyticExpectedValue = 0.438;\r\nconst analyticVariance = 0.053;\r\n// const min = 0;\r\n// const max = Math.PI / 4;\r\nconst constLambda = 1.22;\r\nconst constP = 0.1;\r\n\r\n/* Плотность распределения */\r\nconst f = x => {\r\n    return 1 / (1 - Math.sin(x) ** 2);\r\n};\r\n\r\n/* Функция распределения */\r\nconst F = x => Math.tan(x);\r\n\r\n/* Обратная первообразной функция*/\r\nconst reverseF = x => Math.atan(x);\r\n\r\n/* Статистическая функция распределения */\r\n// const statFunction = sortedArr => {\r\n//     const len = sortedArr.length;\r\n//     const res = sortedArr.map((_, index) => (index + 1) / len);\r\n//     return res;\r\n// };\r\n\r\nexport const generateRandomValues = n => {\r\n    return [...new Array(n)].map(() => {\r\n        return Math.random();\r\n    });\r\n};\r\n\r\nconst Lab3 = () => {\r\n    const [u, setUpd] = useState(true);\r\n    const [arraySize, setArraySize] = useState(50);\r\n\r\n    /* Генерируем arraySize случайных чисел */\r\n    const randomNumbers = generateRandomValues(arraySize).sort((a, b) => a - b);\r\n\r\n    /* Находим значения обратной функции */\r\n    const reverseValues = randomNumbers.map(reverseF);\r\n\r\n    const statValues = [];\r\n    const Fvalues = [];\r\n    let deltaP = 0;\r\n    let min = 1;\r\n    let max = 0;\r\n\r\n    const m = arraySize > 500 ? 30 : Math.floor(arraySize / (15 / 20));\r\n\r\n    const before = Date.now();\r\n    reverseValues.forEach((x, index) => {\r\n        const FValue = F(x);\r\n\r\n        if (FValue < min) {\r\n            min = FValue;\r\n        }\r\n\r\n        if (FValue > max) {\r\n            max = FValue;\r\n        }\r\n        const statValue = (index + 1) / arraySize;\r\n\r\n        const delta = Math.abs(FValue - statValue);\r\n\r\n        if (delta > deltaP) {\r\n            deltaP = delta;\r\n        }\r\n\r\n        statValues.push(statValue);\r\n        Fvalues.push(FValue);\r\n    });\r\n\r\n    const deltaX = (max - min) / m;\r\n\r\n    const parts = [];\r\n\r\n    let i = 0;\r\n\r\n    while (i < m) {\r\n        const minValue = min + deltaX * i;\r\n        const maxValue = minValue + deltaX;\r\n        parts[i] = {\r\n            minValue,\r\n            maxValue,\r\n            data: [],\r\n            size: 0\r\n        };\r\n        i++;\r\n    }\r\n\r\n    reverseValues.forEach(val => {\r\n        parts.forEach(item => {\r\n            const { minValue, maxValue } = item;\r\n            if (val >= minValue && val <= maxValue) {\r\n                item.size += 1;\r\n                item.data.push(val);\r\n            }\r\n        });\r\n    });\r\n\r\n    const mappedParts = parts.map(part => ({\r\n        V: (part.minValue + part.maxValue) / 2,\r\n        P: part.size / arraySize\r\n    }));\r\n\r\n    const mean = mappedParts.reduce((sum, item) => sum + item.P * item.V, 0);\r\n    const variance = mappedParts.reduce(\r\n        (sum, item) => sum + item.P * (item.V - mean) ** 2,\r\n        0\r\n    );\r\n\r\n    const lambda = deltaP * Math.sqrt(arraySize);\r\n    const isOk = lambda <= constLambda;\r\n\r\n    /* Преобразуем в формат графика */\r\n    const FChartData = reverseValues.map((item, i) => ({\r\n        x: item,\r\n        y: Fvalues[i]\r\n    }));\r\n\r\n    const statChartData = reverseValues.map((item, i) => ({\r\n        x: item,\r\n        y: statValues[i]\r\n    }));\r\n\r\n    const after = Date.now();\r\n    console.log('Time', after - before);\r\n    return (\r\n        <div>\r\n            <label>\r\n                <div>Размер выборки</div>\r\n                <input\r\n                    type=\"number\"\r\n                    defaultValue={arraySize}\r\n                    onKeyPress={e => {\r\n                        if (e.key === 'Enter') {\r\n                            setArraySize(+e.target.value);\r\n                            setUpd(!u);\r\n                        }\r\n                    }}\r\n                />\r\n            </label>\r\n            <div style={{ maxWidth: '700px' }}>\r\n                <Line\r\n                    options={{\r\n                        animation: {\r\n                            duration: 0\r\n                        },\r\n                        hover: {\r\n                            animationDuration: 0\r\n                        },\r\n                        responsiveAnimationDuration: 0,\r\n                        elements: {\r\n                            line: {\r\n                                tension: 0\r\n                            }\r\n                        },\r\n                        scales: {\r\n                            xAxes: [\r\n                                {\r\n                                    type: 'linear',\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'Xi'\r\n                                    }\r\n                                }\r\n                            ],\r\n                            yAxes: [\r\n                                {\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'F(x)'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        },\r\n                        legend: {\r\n                            display: true\r\n                        }\r\n                    }}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                data: statChartData,\r\n                                fill: false,\r\n                                borderColor: 'blue',\r\n                                label: 'F*(x)',\r\n                                pointRadius: 0,\r\n                                pointHitRadius: 0\r\n                            },\r\n                            {\r\n                                data: FChartData,\r\n                                fill: false,\r\n                                borderColor: 'green',\r\n                                label: 'F(x)',\r\n                                pointRadius: 0,\r\n                                pointHitRadius: 0\r\n                            }\r\n                        ]\r\n                    }}\r\n                />\r\n            </div>\r\n\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <th>\r\n                            Δ<sub>p</sub>\r\n                        </th>\r\n                        <td colSpan={2}>{deltaP.toFixed(3)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>\r\n                            λ<sub>p</sub>\r\n                        </th>\r\n                        <td colSpan={2}>\r\n                            <b style={{ color: isOk ? 'green' : 'red' }}>\r\n                                {lambda.toFixed(4)}\r\n                            </b>\r\n                            <b>\r\n                                {isOk ? '⩽' : '>'} {constLambda}\r\n                            </b>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <th colSpan={3}>Параметры распределения</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th></th>\r\n                        <th>Теоретический</th>\r\n                        <th>Эмпирический</th>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <th>Мат. ожидание</th>\r\n                        <th>{analyticExpectedValue}</th>\r\n                        <th>{mean.toFixed(3)}</th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th>Дисперсия</th>\r\n                        <th>{analyticVariance}</th>\r\n                        <th>{variance.toFixed(3)}</th>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Lab3;\r\n","import React, { useState } from 'react';\r\nimport '../App.css';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { generateRandomValues } from './lab3';\r\n/* Вариант 3 */\r\n\r\nconst D = 0.5;\r\nconst alpha = 2;\r\nconst h = 0.002;\r\nconst S0 = h / 12;\r\nconst Kf = Math.sqrt((2 * D) / alpha / S0);\r\nconst Tf = 1 / alpha;\r\n\r\nconst Lab4 = () => {\r\n    const [n, setN] = useState(10000);\r\n    const [u, setU] = useState(true);\r\n    const whiteNoise = generateRandomValues(n).map(item => item - 0.5);\r\n    let mean = 0;\r\n    const X = new Array(n).fill(0);\r\n    for (let i of [...Array(n - 1).keys()]) {\r\n        X[i + 1] = X[i] + h * ((Kf / Tf) * whiteNoise[i] - (1 / Tf) * X[i]);\r\n        mean += X[i + 1];\r\n    }\r\n    mean /= n;\r\n    const nsteps = 3 / alpha / h;\r\n    const corrTheoretical = new Array(nsteps)\r\n        .fill(0)\r\n        .map((_, i) => D * Math.exp(-alpha * i * h));\r\n    const corrEmpirical = [];\r\n    for (let j of [...Array(nsteps).keys()]) {\r\n        let sum = 0;\r\n        for (let i of [...Array(n - j).keys()]) {\r\n            sum += (X[i] - mean) * (X[i + j] - mean);\r\n        }\r\n        sum /= n + 1 - j;\r\n        corrEmpirical.push(sum);\r\n    }\r\n    const theorData = corrTheoretical.map((item, index) => ({\r\n        x: index,\r\n        y: item\r\n    }));\r\n    const empirData = corrEmpirical.map((item, index) => ({\r\n        x: index,\r\n        y: item\r\n    }));\r\n\r\n    return (\r\n        <div>\r\n            <label>\r\n                <div>Размер выборки {n}</div>\r\n                {/* <input\r\n                    type=\"number\"\r\n                    defaultValue={n}\r\n                    onKeyPress={e => {\r\n                        if (e.key === 'Enter') {\r\n                            const val = +e.target.value;\r\n                            console.log(val, nsteps);\r\n                            if (val < nsteps) {\r\n                                e.target.value = 750;\r\n                                return;\r\n                            }\r\n                            setU(!u);\r\n                            setN(+e.target.value);\r\n                        }\r\n                    }}\r\n                /> */}\r\n                <button onClick={() => setU(!u)}>Сгенерировать</button>\r\n            </label>\r\n            <div style={{ maxWidth: '700px' }}>\r\n                <Line\r\n                    options={{\r\n                        animation: {\r\n                            duration: 0\r\n                        },\r\n                        hover: {\r\n                            animationDuration: 0\r\n                        },\r\n                        responsiveAnimationDuration: 0,\r\n                        elements: {\r\n                            line: {\r\n                                tension: 0\r\n                            }\r\n                        },\r\n                        scales: {\r\n                            xAxes: [\r\n                                {\r\n                                    type: 'linear',\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 't'\r\n                                    }\r\n                                }\r\n                            ],\r\n                            yAxes: [\r\n                                {\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'K(t)'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        },\r\n                        legend: {\r\n                            display: true\r\n                        }\r\n                    }}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                data: theorData,\r\n                                fill: false,\r\n                                borderColor: 'blue',\r\n                                label: 'Теор. K(t)',\r\n                                pointRadius: 0,\r\n                                pointHitRadius: 0\r\n                            },\r\n                            {\r\n                                data: empirData,\r\n                                fill: false,\r\n                                borderColor: 'green',\r\n                                label: 'Эмпирическая K*(t)',\r\n                                pointRadius: 0,\r\n                                pointHitRadius: 0\r\n                            }\r\n                        ]\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Lab4;\r\n","import React, { useState } from 'react';\r\nimport { generateRandomValues } from './lab3';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nfunction factorial(n) {\r\n    return n != 1 ? n * factorial(n - 1) : 1;\r\n}\r\n\r\nconst D = 1;\r\nconst alpha = 1;\r\nconst h = 0.002;\r\nconst n = 10000;\r\nconst nsteps = 3 / alpha / h;\r\n\r\nconst S0 = h;\r\nconst Kf = Math.sqrt((2 * D) / alpha / S0);\r\nconst Tf = 1 / alpha;\r\n\r\n/*********** */\r\nconst getNormalSample = size => {\r\n    const normalSample = [];\r\n\r\n    while (normalSample.length < size) {\r\n        const uniSample = generateRandomValues(2);\r\n        const [v1, v2] = uniSample.map(item => 2 * item - 1);\r\n        const s = v1 ** 2 + v2 ** 2;\r\n\r\n        if (s >= 1) {\r\n            continue;\r\n        }\r\n\r\n        const r = Math.sqrt((-2 * Math.log(s)) / s);\r\n\r\n        normalSample.push(r * v1);\r\n        normalSample.push(r * v2);\r\n    }\r\n\r\n    return normalSample.slice(0, size);\r\n};\r\n\r\nconst towardUniform = sample => {\r\n    let rightFactor = 0;\r\n\r\n    for (let i of [...Array(30).keys()]) {\r\n        rightFactor +=\r\n            (Math.pow(-1, i) * Math.pow(sample, i * 2)) /\r\n            Math.pow(2, i) /\r\n            factorial(i) /\r\n            (i * 2 + 1);\r\n    }\r\n\r\n    return 0.5 + (sample / Math.sqrt(2 * Math.PI)) * rightFactor;\r\n};\r\n\r\nconst Lab5 = () => {\r\n    const [u, setU] = useState(true);\r\n    const whiteNoise = getNormalSample(n);\r\n\r\n    let mean1 = 0;\r\n    const X1 = new Array(n).fill(0);\r\n    for (let i of [...Array(n - 1).keys()]) {\r\n        X1[i + 1] = X1[i] + h * ((Kf / Tf) * whiteNoise[i] - (1 / Tf) * X1[i]);\r\n        mean1 += X1[i + 1];\r\n    }\r\n    console.log(X1);\r\n    mean1 /= n;\r\n    const corrTheoretical1 = new Array(nsteps)\r\n        .fill(0)\r\n        .map((_, i) => D * Math.exp(-alpha * i * h));\r\n    const corrEmpirical1 = [];\r\n    for (let j of [...Array(nsteps).keys()]) {\r\n        let sum = 0;\r\n        for (let i of [...Array(n - j).keys()]) {\r\n            sum += (X1[i] - mean1) * (X1[i + j] - mean1);\r\n        }\r\n        sum /= n + 1 - j;\r\n        corrEmpirical1.push(sum);\r\n    }\r\n\r\n    const theorData1 = corrTheoretical1.map((item, index) => ({\r\n        x: index,\r\n        y: item\r\n    }));\r\n    const empirData1 = corrEmpirical1.map((item, index) => ({\r\n        x: index,\r\n        y: item\r\n    }));\r\n\r\n    /************ */\r\n    return (\r\n        <div>\r\n            <button onClick={() => setU(!u)}>Сгенерировать</button>\r\n\r\n            <p>После формирующего фильтра</p>\r\n            <div style={{ maxWidth: '700px' }}>\r\n                <Line\r\n                    options={{\r\n                        animation: {\r\n                            duration: 0\r\n                        },\r\n                        hover: {\r\n                            animationDuration: 0\r\n                        },\r\n                        responsiveAnimationDuration: 0,\r\n                        elements: {\r\n                            line: {\r\n                                tension: 0\r\n                            }\r\n                        },\r\n                        scales: {\r\n                            xAxes: [\r\n                                {\r\n                                    type: 'linear',\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 't'\r\n                                    }\r\n                                }\r\n                            ],\r\n                            yAxes: [\r\n                                {\r\n                                    scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'K(t)'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        },\r\n                        legend: {\r\n                            display: true\r\n                        }\r\n                    }}\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                data: theorData1,\r\n                                fill: false,\r\n                                borderColor: 'blue',\r\n                                label: 'Теор. K(t)',\r\n                                pointRadius: 0,\r\n                                pointHitRadius: 0\r\n                            },\r\n                            {\r\n                                data: empirData1,\r\n                                fill: false,\r\n                                borderColor: 'green',\r\n                                label: 'Эмпирическая K*(t)',\r\n                                pointRadius: 0,\r\n                                pointHitRadius: 0\r\n                            }\r\n                        ]\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Lab5;\r\n","import React from 'react';\r\n\r\nconst Lab6 = () => {\r\n    return <div></div>;\r\n};\r\n\r\nexport default Lab6;\r\n","import React, { useState, useRef } from 'react';\r\n\r\nconst teorQ = 0.43;\r\nconst teorP = 0.57;\r\n\r\nconst lambda = 15;\r\nconst mu = 20;\r\nconst targetError = 0.01;\r\n\r\nconst delta = arg => {\r\n    return -Math.log(1 - Math.random()) / arg;\r\n};\r\n\r\nconst Lab7 = () => {\r\n    const [u, setU] = useState(true);\r\n\r\n    let t = delta(lambda);\r\n    let tau = t + delta(mu);\r\n    let n_counter = 1;\r\n    let m_counter = 1;\r\n\r\n    while (t < 100) {\r\n        t += delta(lambda);\r\n        n_counter += 1;\r\n\r\n        if (t > tau) {\r\n            m_counter += 1;\r\n            tau = t + delta(mu);\r\n        }\r\n    }\r\n\r\n    let ε_p = m_counter / n_counter;\r\n    let ε_error = 3 * Math.sqrt((ε_p * (1 - ε_p)) / n_counter);\r\n    const firstAttempt = {\r\n        err: ε_error,\r\n        p: ε_p,\r\n        t,\r\n        N: n_counter,\r\n        M: m_counter\r\n    };\r\n\r\n    while (ε_error > targetError) {\r\n        let nRequired = Math.round((9 * ε_p * (1 - ε_p)) / targetError ** 2);\r\n        for (let i of [...Array(nRequired).keys()]) {\r\n            t += delta(lambda);\r\n            n_counter += 1;\r\n\r\n            if (t > tau) {\r\n                m_counter += 1;\r\n\r\n                tau = t + delta(mu);\r\n            }\r\n        }\r\n\r\n        ε_p = m_counter / n_counter;\r\n        ε_error = 3 * Math.sqrt((ε_p * (1 - ε_p)) / n_counter);\r\n    }\r\n\r\n    const secondAttempt = {\r\n        err: ε_error,\r\n        p: ε_p,\r\n        t,\r\n        N: n_counter,\r\n        M: m_counter\r\n    };\r\n    return (\r\n        <div>\r\n            <form\r\n                onSubmit={e => {\r\n                    e.preventDefault();\r\n                    setU(!u);\r\n                }}\r\n            >\r\n                <button type=\"submit\">Смоделировать</button>\r\n            </form>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>λ</td>\r\n                        <td>{lambda}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>μ</td>\r\n                        <td>{mu}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>p</td>\r\n                        <td>{teorP}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <table>\r\n                <tbody>\r\n                    <tr>\r\n                        <td></td>\r\n                        <td>За 100 секунд</td>\r\n                        <td>\r\n                            Спустя{' '}\r\n                            {(secondAttempt.t - firstAttempt.t).toFixed(0)}{' '}\r\n                            секунд\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>t</td>\r\n                        <td>{firstAttempt.t.toFixed(0)}</td>\r\n                        <td>{secondAttempt.t.toFixed(0)}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>ε*</td>\r\n                        <td>{firstAttempt.err}</td>\r\n                        <td>{secondAttempt.err}</td>\r\n                    </tr>\r\n\r\n                    <tr>\r\n                        <td>N</td>\r\n                        <td>{firstAttempt.N}</td>\r\n                        <td>{secondAttempt.N}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>M</td>\r\n                        <td>{firstAttempt.M}</td>\r\n                        <td>{secondAttempt.M}</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>p*</td>\r\n                        <td>{firstAttempt.p}</td>\r\n                        <td>{secondAttempt.p}</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Lab7;\r\n","import React from 'react';\r\n\r\nconst Lab8 = () => {\r\n    return <div></div>;\r\n};\r\n\r\nexport default Lab8;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <ol>\r\n            <li>\r\n                <Link to=\"/lab1\">\r\n                    Программная реализация имитационной модели нелинейной\r\n                    динамической системы\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lab2\">\r\n                    Имитационное моделирование детерменированного конечного\r\n                    автомата\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lab3\">\r\n                    Проектирование генератора случайных чисел с заданным законом\r\n                    распределения\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lab4\">\r\n                    Построение генератора случайного процесса методом\r\n                    формирующего фильтра\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lab5\">\r\n                    Построение генератора случайного процесса с заданным законом\r\n                    распределения и корреляционной функцией\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lab6\">\r\n                    Проверка стационарности и эргодичности случайного процесса\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lab7\">\r\n                    Статистическое имитационное моделирование одноканальной\r\n                    системы массового обслуживания с отказами\r\n                </Link>\r\n            </li>\r\n            <li>\r\n                <Link to=\"/lab8\">\r\n                    Статистическое имитационное моделирование многоканальной\r\n                    системы массового обслуживания\r\n                </Link>\r\n            </li>\r\n        </ol>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Switch, Route, Link } from 'react-router-dom';\r\nimport Lab1 from './labs/lab1';\r\nimport Lab2 from './labs/lab2';\r\nimport Lab3 from './labs/lab3';\r\nimport Lab4 from './labs/lab4';\r\nimport Lab5 from './labs/lab5';\r\nimport Lab6 from './labs/lab6';\r\nimport Lab7 from './labs/lab7';\r\nimport Lab8 from './labs/lab8';\r\n\r\nimport Home from './Home';\r\n\r\n/* Модель 1 вариант 3 */\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path=\"/:any\">\r\n                    <div>\r\n                        <Link to=\"/\">К списку работ</Link>\r\n                    </div>\r\n                </Route>\r\n            </Switch>\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/lab1\">\r\n                    <Lab1 />\r\n                </Route>\r\n                <Route path=\"/lab2\">\r\n                    <Lab2 />\r\n                </Route>\r\n                <Route path=\"/lab3\">\r\n                    <Lab3 />\r\n                </Route>\r\n                <Route path=\"/lab4\">\r\n                    <Lab4 />\r\n                </Route>\r\n                <Route path=\"/lab5\">\r\n                    <Lab5 />\r\n                </Route>\r\n                <Route path=\"/lab6\">\r\n                    <Lab6 />\r\n                </Route>\r\n                <Route path=\"/lab7\">\r\n                    <Lab7 />\r\n                </Route>\r\n                <Route path=\"/lab8\">\r\n                    <Lab8 />\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}